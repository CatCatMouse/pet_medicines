<?php
/**
 * Created by caicai
 * Date 2022/7/19 0019
 * Time 10:51
 * Desc
 */


namespace app\api\controller;

use app\api\validate\CaseOperationDetailValidate;
use app\api\validate\CaseOperationValidate;
use app\common\controller\Api;
use app\common\middleware\Token;
use app\common\ResponseJson as RJ;
use think\Exception;
use think\response\Json as J;
use app\api\model\CaseOperations as COM;
use app\common\enum\UserEnumType as T;

/**
 * 类方法注释中含有@authCheck的需要权限验证
 */
class CaseOperations extends Api
{
    public $middleware = []; //使用路由中间件

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $notes = (new \DOCParser\DocParser())->parse((new \ReflectionMethod($this, $this->request->action(true)))->getDocComment());
        if (isset($notes['authCheck'])) {
            $this->authCheck();
        }
    }

    /**
     * @throws \ReflectionException
     * @throws Exception
     */
    protected function authCheck(): void
    {
        switch ($this->request->userInfo['type']) {
            case T::XIAOSHOU:
                if (isset($this->request->userInfo['hospital_info'][$this->request->post('hospital_id', 0)])) {
                    throw new Exception('您没有权限操作');
                }
                break;
            case T::YISHENG:
                if (1 != ($this->request->userInfo['hospital_info']['case_auth'] ?? -1)
                    || $this->request->userInfo['hospital_id'] != $this->request->post('hospital_id', 0)) {
                    throw new Exception('您没有权限操作');
                }
                break;
            case T::YIYUAN:
                if ($this->request->userInfo['hospital_id'] != $this->request->post('hospital_id', 0)) {
                    throw new Exception('您没有权限操作');
                }
                break;
            default:
                throw new Exception('非法操作');
        }
    }

    /**
     * 新增手术
     * @param CaseOperationValidate $va
     * @authCheck
     * @return J
     */
    public function add(CaseOperationValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $operation_id = COM::add($this->request->post());

        if (is_string($operation_id)) {
            return RJ::fail($operation_id);
        }
        return RJ::success(['id' => $operation_id, 'case_id' => $this->request->post('case_id')], '添加成功');
    }

    /**
     * 编辑手术
     * @param CaseOperationValidate $va
     * @authCheck
     * @return J
     */
    public function edit(CaseOperationValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::edit($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '编辑成功');
    }

    /**
     * 新增术前
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function before_add(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::beforeAdd($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '添加成功');
    }

    /**
     * 新增术中
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function middle_add(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::middleAdd($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '添加成功');
    }

    /**
     * 新增术后
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function after_add(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::afterAdd($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '添加成功');
    }

    /**
     * 编辑术前
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function before_edit(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::beforeEdit($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '编辑成功');
    }

    /**
     * 编辑术中
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function middle_edit(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::middleEdit($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '编辑成功');
    }

    /**
     * 编辑术后
     * @param CaseOperationDetailValidate $va
     * @authCheck
     * @return J
     */
    public function after_edit(CaseOperationDetailValidate $va): J
    {
        if (!$va->scene(__FUNCTION__)->check($this->request->post())) {
            return RJ::fail($va->getError());
        }

        $res = COM::afterEdit($this->request->post());

        if (true !== $res) {
            return RJ::fail($res);
        }
        return RJ::success([], '编辑成功');
    }

    /**
     * 手术详情页
     * @return J
     */
    public function detail(): J
    {
        return RJ::success(COM::detail($this->request->post()));
    }

    /**
     * 手术类型的详情页
     * @return J
     */
    public function operation_type_detail(): J
    {
        return RJ::success(COM::operation_type_detail($this->request->post()));
    }

}